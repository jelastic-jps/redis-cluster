type: update
jpsVersion: 1.8.1
name: Redis auto-scalable cluster
decription: Redis cluster autoscaling logic
baseUrl: https://raw.githubusercontent.com/jelastic-jps/redis-cluster/main/

permanent: true

targetNodes: 
  nodeGroup: ${settings.nodeGroup:nosqldb}

nodeGroupAlias:
  ${settings.nodeGroup}: nosqldb

onInstall:
  - getRedisConfigPath	
  - clusterInit

onAfterRedeployContainer[nosqldb]:
  - getEncPassUtil
  - getRedisConfigPath

onAfterServiceScaleOut[nosqldb]:
  - addNewNodeToCluster
  - setClusterAnnounceIp: ${event.response.nodes.join(id,)}

onBeforeScaleIn[nosqldb]:
  - forEach(event.response.nodes):
    - cmd[${@i.id}]: |-
        ip a | grep -A1 venet0 | grep inet | awk '{print $2}'| sed 's/\/[0-9]*//g' | head -n 2|tail -n 1;
      user: root
    - reshardAndRemoveBeforeScaleIn:
        address: ${response.out}
  - rebalanceCluster

onBeforeMigrate:
  - if (${env.status} != 1): 
      stopEvent:
        type: info
        message: Migration of non-running Redis cluster is not supported.
  - else:
    - saveCurrentIpAddress

onBeforeClone:
  - if (${env.status} == 1): 
    - saveCurrentIpAddress

onAfterMigrate:
  - setClusterAnnounceIp: ${nodes.nosqldb.join(id,)}
  - updateIpAddresses

onAfterAttachExtIp[nosqldb]:
  - setClusterAnnounceIp: ${nodes.nosqldb.join(id,)}
  - saveCurrentIpAddress

onBeforeDetachExtIp[nosqldb]:
  - setClusterAnnounceIp: ${nodes.nosqldb.join(id,)}

onAfterDetachExtIp[nosqldb]:
  - saveCurrentIpAddress

onAfterSetExtIpCount[nosqldb]:
  - setClusterAnnounceIp: ${nodes.nosqldb.join(id,)}
  - saveCurrentIpAddress

onBeforeResetServicePassword[nosqldb]:
  - resetRedisPasswd

onBeforeResetNodePassword[nosqldb]:
  - resetRedisPasswd

onAfterClone:
  - script: delete MANIFEST.id; return {result:0, jps:MANIFEST};
  - install: ${response.jps}
    envName: ${event.response.env.envName}
    settings:
      nodeGroup: nosqldb
      clone: true

actions:
  resetRedisPasswd:
    - cmd[${nodes.nosqldb.master.id}]: |-
        NEW_REDIS_PASS=$(printf '%s' $(echo "$RANDOM" | md5sum) | cut -c 1-10)
        sed -i "/^requirepass.*/ s/^requirepass.*/requirepass ${NEW_REDIS_PASS}/" ${globals.redisConfigPath}
      user: root
    - setMasterAuth: nosqldb
    - script: |-
        var resp = api.env.control.ExecCmdByGroup('${env.name}', session, nodeGroup, toJSON([{ "command": "cat ${globals.redisConfigPath} |grep '^requirepass'|awk '{print $2}'", "params":""}]), true);
        if (resp.result != 0) return resp;
        var passwd = resp.responses[0].out;
        var title = "Redis cluster password was successfully reset for ${env.name}"
            text = "<p>Redis cluster password was successfully reset for your ${env.name} environment.</p><p><strong>Admin panel</strong>:&nbsp;${nodes.nosqldb.master.adminUrl}</p><p><strong>User </strong>admin</p><p><strong>Password</strong>:&nbsp;" + passwd + "</p>"
        return api.message.email.Send(appid, signature, null, '${user.email}', '${user.email}', title, text);
      nodeGroup: nosqldb
    - stopEvent:
        type: success
        message: Redis cluster password changed successfully. 

  clusterInit:
    - if (!${settings.clone:false}):
      - prepareClusterNode: ${nodes.nosqldb.join(id,)}
      - cmd[${nodes.nosqldb.master.id}]: |-
          export REDISCLI_AUTH=$(cat ${globals.redisConfigPath} |grep '^requirepass'|awk '{print $2}');
          yes yes| redis-cli --cluster create $(echo ${nodes.nosqldb.join(address,)} | sed 's/,/:6379 /g'):6379 --cluster-replicas 1
        user: root
        sayYes: no
      - rebalanceCluster
      - cmd[nosqldb]: jem service stop
      - forEach(nodes.nosqldb):
        - cmd[${@i.id}]:
            sed -i '/^cluster-announce-ip/d' ${globals.redisConfigPath};
            echo "cluster-announce-ip $(ip a | grep -A1 venet0 | grep inet | awk '{print $2}'| sed 's/\/[0-9]*//g' | head -n 2|tail -n 1)" >> ${globals.redisConfigPath};
          user: root
          sayYes: no
        - cmd[${@i.id}]: if ip a|grep -q eth0; then INTERFACE="eth0"; else INTERFACE="venet0"; fi; ip a | grep -A1 ${INTERFACE} | grep inet | awk '{print $2}'| sed 's/\/[0-9]*//g' | head -n 2|tail -n 1;
          user: root
        - cmd[nosqldb]: sed -i 's/${@i.address}/${response.out}/'  /var/lib/redis/nodes.conf 
          user: root
      - cmd[nosqldb]: jem service start;
      - cmd[${nodes.nosqldb.master.id}]: cat ${globals.redisConfigPath} |grep '^requirepass'|awk '{print $2}'
      - script: |-
          var resp = api.env.control.ExecCmdByGroup('${env.name}', session, nodeGroup, toJSON([{ "command": "cat ${globals.redisConfigPath} |grep '^requirepass'|awk '{print $2}'", "params":""}]), false);
          if (resp.result != 0) return resp;
          var passwd = resp.responses[0].out;
          var title = "Redis auto-scalable cluster ${env.name} is Up and Running";
          text = '<p>Your Redis auto-scalable cluster ${env.name} has been successfully deployed.<br><strong>Admin Panel </strong><a href="${nodes.nosqldb.master.url}">${nodes.nosqldb.master.url}</a><br> <strong>User </strong>admin<br> <strong>Password</strong> ' + passwd + ' </p>';
          return api.message.email.Send(appid, signature, null, '${user.email}', '${user.email}', title, text);
        nodeGroup: nosqldb
    - else:
      - cmd[nosqldb]: jem service stop
      - forEach(nodes.nosqldb):
        - cmd[${@i.id}]:
            sed -i '/^cluster-announce-ip/d' ${globals.redisConfigPath};
            echo "cluster-announce-ip $(ip a | grep -A1 venet0 | grep inet | awk '{print $2}'| sed 's/\/[0-9]*//g' | head -n 2|tail -n 1)" >> ${globals.redisConfigPath};
          user: root
          sayYes: no
        - cmd[${@i.id}]: cat /root/.previous_ip
          user: root
        - cmd[nosqldb]: sed -i 's/${response.out}/${@i.address}/'  /var/lib/redis/nodes.conf 
          user: root
      - cmd[nosqldb]: jem service start;
    - saveCurrentIpAddress
        
  prepareClusterNode:
    - getEncPassUtil
    - setMasterAuth: ${this}
    - cmd[${this}]:
        sed -i 's/^loglevel notice/loglevel warning/' ${globals.redisConfigPath};
        echo -e "cluster-enabled yes\ncluster-config-file nodes.conf\ncluster-node-timeout 5000\nappendonly yes" >> ${globals.redisConfigPath};
        jem service restart;
      user: root
      
  reshardAfterScaleOut:
    - cmd[${this.id}]:
        export REDISCLI_AUTH=$(cat ${globals.redisConfigPath} |grep '^requirepass'|awk '{print $2}');
        export NEW_NODE_ID=$(redis-cli cluster nodes|grep ${this.address}|grep master|awk '{print $1}');
        export n=$(redis-cli cluster nodes|grep master|wc -l);
        export SHARDS_NUM=$(( 16384 / ${n} ));
        if [ ! -z "${NEW_NODE_ID}" ]; then redis-cli --cluster reshard ${this.address}:6379 --cluster-from all --cluster-to ${NEW_NODE_ID} --cluster-slots ${SHARDS_NUM} --cluster-yes; else true; fi;
        redis-cli --cluster check ${this.address}:6379 || redis-cli --cluster fix ${this.address}:6379;
      user: root
      sayYes: no
      
  reshardAndRemoveBeforeScaleIn:
    - cmd[${nodes.nosqldb.master.id}]: |-
        export REDISCLI_AUTH=$(cat ${globals.redisConfigPath} |grep '^requirepass'|awk '{print $2}');
        export MASTER_NODE_ADDR=$(ip a | grep -A1 venet0 | grep inet | awk '{print $2}'| sed 's/\/[0-9]*//g' | head -n 2|tail -n 1);
        redis-cli --cluster check ${MASTER_NODE_ADDR}:6379 || redis-cli --cluster fix ${MASTER_NODE_ADDR}:6379;
        export SHARDS_NUM=$(redis-cli --cluster check ${this.address}:6379|grep '^${this.address}:6379'|awk '{print $7}');
        export OLD_NODE_ID=$(redis-cli cluster nodes|grep ${this.address}:6379|awk '{print $1}');
        export MASTER_NODE_ID=$(redis-cli cluster nodes|grep master|awk '{print $1}'|grep -v $OLD_NODE_ID|head -n 1);
        if [ ! -z "${SHARDS_NUM}" ]; then 
            redis-cli --cluster reshard ${MASTER_NODE_ADDR}:6379 --cluster-from ${OLD_NODE_ID} --cluster-to ${MASTER_NODE_ID} --cluster-slots ${SHARDS_NUM} --cluster-yes; 
            export HOST_LIST_AFTER_REMOVE=$(redis-cli cluster nodes|grep -v ${this.address}|awk '{print $2}'|awk -F ':' '{print $1}'|tr '\n' ' ');
            for i in ${HOST_LIST_AFTER_REMOVE}; do redis-cli -h ${i} cluster forget ${OLD_NODE_ID}; done; 
        else 
            redis-cli --cluster del-node ${MASTER_NODE_ADDR}:6379 ${OLD_NODE_ID} --cluster-yes; 
        fi;
      user: root
      sayYes: no
      
  addNewNodeToCluster:
    - prepareClusterNode: ${event.response.nodes.join(id,)}
    - forEach(event.response.nodes):
        - cmd[${nodes.nosqldb.master.id}]: |-
            export REDISCLI_AUTH=$(cat ${globals.redisConfigPath} |grep '^requirepass'|awk '{print $2}');
            export n=$(redis-cli cluster nodes|wc -l);
            redis-cli -h ${nodes.nosqldb.master.address} cluster meet ${@i.address} 6379;
            if [ $(expr $n % 2) != 0 ]; then
                MASTERS_LIST=$(redis-cli cluster nodes|grep master|grep -v ${@i.address}:6379|awk '{print $2}'|awk -F ':' '{print $1}'|tr '\n' ' ')
                for i in ${MASTERS_LIST}
                do
                   SLAVES_STRING=$(redis-cli -h $i INFO|grep ^slave[0-9])        
                   if [[ -z "${SLAVES_STRING}" ]]; then
                        TARGET_MASTER_ID=$(redis-cli cluster nodes|grep $i:6379|awk '{print $1}')
                        break
                    fi
                done
                retries=12
                while [ $retries -gt 0 ]; do
                    sleep 20
                    NODES_LIST=$(redis-cli -h ${@i.address} cluster nodes|grep -v ERR)
                    [ -n "${NODES_LIST}" ] && break
                    let retries=${retries}-1
                done
                redis-cli -h ${@i.address} cluster replicate ${TARGET_MASTER_ID}
            fi;
          user: root
    - forEach(event.response.nodes):
        - reshardAfterScaleOut: 
            id: ${@i.id}
            address: ${@i.address}
    - rebalanceCluster

  saveCurrentIpAddress:
    - cmd[nosqldb]:
        cat ${globals.redisConfigPath} |grep '^cluster-announce-ip'|awk '{print $2}' > /root/.previous_ip
      user: root
      sayYes: no

  updateIpAddresses:
    - cmd[nosqldb]: jem service stop
    - forEach(nodes.nosqldb):
        - cmd[${@i.id}]: |-
            ip a | grep -A1 venet0 | grep inet | awk '{print $2}'| sed 's/\/[0-9]*//g' | head -n 2|tail -n 1;
          user: root
        - setGlobals:  
            newIpAddress: ${response.out}
        - cmd[${@i.id}]: cat /root/.previous_ip
          user: root
        - cmd[nosqldb]: sed -i 's/${response.out}/${globals.newIpAddress}/'  /var/lib/redis/nodes.conf 
          user: root
    - cmd[nosqldb]: jem service start
    - cmd[nosqldb]: rm -f /root/.previous_ip
      user: root
    
  rebalanceCluster:
    - cmd[${nodes.nosqldb.master.id}]:
        export REDISCLI_AUTH=$(cat ${globals.redisConfigPath} |grep '^requirepass'|awk '{print $2}');
        redis-cli --cluster check ${nodes.nosqldb.master.address}:6379 || redis-cli --cluster fix ${nodes.nosqldb.master.address}:6379;
        redis-cli --cluster rebalance ${nodes.nosqldb.master.address}:6379;
      user: root
      
  setClusterAnnounceIp:
    - cmd[${this}]:
        jem service stop;
        sed -i '/^cluster-announce-ip/d' ${globals.redisConfigPath};
        echo "cluster-announce-ip $(ip a | grep -A1 venet0 | grep inet | awk '{print $2}'| sed 's/\/[0-9]*//g' | head -n 2|tail -n 1)" >> ${globals.redisConfigPath};
        jem service start;
      user: root
      sayYes: no
      
  setMasterAuth:
    - cmd[${nodes.nosqldb.master.id}]: |-
        encPass getEncPass ${env.name}
      user: root
    - cmd[${this}]: |-
        encPass setEncPass ${env.name} ${response.out}
      user: root

  getRedisConfigPath:
    - cmd[${nodes.nosqldb.master.id}]: realpath /etc/redis.conf
    - setGlobals:
        redisConfigPath: ${response.out}

  getEncPassUtil:
    - cmd[nosqldb] : wget -O /usr/local/sbin/encPass ${baseUrl}/scripts/encPass && chmod +x /usr/local/sbin/encPass;
      user: root

success:
  email: false
  text: |-
    **Admin Panel**: [${nodes.nosqldb.master.url}](${nodes.nosqldb.master.url})  
    Credentilas are sent in the e-mail.
